(function(){"use strict";const L=self;L.addEventListener("error",C=>{const u={message:C.message||C.error&&C.error.message||"Unknown worker error",filename:C.filename,lineno:C.lineno,colno:C.colno,stack:C.error&&C.error.stack};L.postMessage({id:-1,type:"worker_internal_error",payload:u}),C.preventDefault()}),L.addEventListener("unhandledrejection",C=>{const u=C.reason||{},A={message:typeof u=="string"?u:u.message||"Unhandled rejection in worker",stack:u&&u.stack?u.stack:void 0};L.postMessage({id:-1,type:"worker_internal_error",payload:A}),C.preventDefault()});function F(C){const u={parameters:{},moleculeTypes:[],species:[],observables:[],reactions:[],reactionRules:[]},A=(o,p)=>{const i=(m=>{const f={92:!0,94:!0,36:!0,42:!0,43:!0,63:!0,46:!0,40:!0,41:!0,124:!0,91:!0,93:!0,123:!0,125:!0};let l="";for(let e=0;e<m.length;e++){const s=m.charCodeAt(e);f[s]&&(l+="\\"),l+=m[e]}return l})(o),b=new RegExp("^\\s*begin\\s+"+i+"\\b","i"),E=new RegExp("^\\s*end\\s+"+i+"\\b","i"),t=p.split(/\r?\n/),n=[];let c=!1;for(const m of t){const f=m.split("#")[0];if(!c){b.test(f)&&(c=!0);continue}if(E.test(f))break;n.push(m)}return n.join(`
`).trim()},R=o=>o.trim().split("#")[0].trim(),x=(o,p)=>{const r=o.trim().split(/\s+/);if(r.length===0)return{productChunk:"",rateChunk:""};const i=[];for(;r.length>0;){const E=r[r.length-1].replace(/,$/,""),t=Object.hasOwn(p,E),n=E!==""&&!Number.isNaN(parseFloat(E)),c=r.length===1&&E==="0";if(!t&&!n||c)break;i.push(E),r.pop()}return{productChunk:r.join(" ").trim(),rateChunk:i.reverse().join(" ").trim()}},$=o=>{const p=[];let r="",i=0;for(let b=0;b<o.length;b++){const E=o[b];if(E==="(")i++;else if(E===")")i--;else if(E==="+"&&i===0){r.trim()&&p.push(r.trim()),r="";continue}r+=E}return r.trim()&&p.push(r.trim()),p},B=A("parameters",C);B&&B.split(/\r?\n/).forEach(o=>{const p=R(o);if(p){const r=p.split(/\s+/);r.length>=2&&(u.parameters[r[0]]=parseFloat(r[1]))}});const v=A("molecule types",C);v&&v.split(/\r?\n/).forEach(o=>{const p=R(o);if(p){const r=p.match(/(\w+)\((.*?)\)/);if(r){const i=r[1],b=r[2].split(",").map(E=>E.trim()).filter(Boolean);u.moleculeTypes.push({name:i,components:b})}else u.moleculeTypes.push({name:p,components:[]})}});const Z=A("seed species",C);Z&&Z.split(/\r?\n/).forEach(o=>{const p=R(o);if(p){const r=p.split(/\s+/),i=r.pop()??"0",b=r.join(" ");let E;i in u.parameters?E=u.parameters[i]:E=parseFloat(i),b&&!Number.isNaN(E)&&u.species.push({name:b,initialConcentration:E})}});const T=A("observables",C);T&&T.split(/\r?\n/).forEach(o=>{const p=R(o);if(p){const r=p.split(/\s+/);r.length>=3&&(r[0].toLowerCase()==="molecules"||r[0].toLowerCase()==="species")&&u.observables.push({name:r[1],pattern:r.slice(2).join(" ")})}});const _=A("reaction rules",C);if(_){const o=[];let p="";_.split(/\r?\n/).forEach(r=>{const i=R(r);i&&(i.endsWith("\\")?p+=i.slice(0,-1).trim()+" ":(p+=i,o.push(p.trim()),p=""))}),p.trim()&&o.push(p.trim()),o.forEach(r=>{let i=r;const b=i.match(/^[^:]+:\s*(.*)$/);b&&(i=b[1]);const E=i.includes("<->"),t=i.split(E?"<->":"->");if(t.length<2){console.warn("[Worker] Rule parsing failed - not enough parts:",r);return}const n=t[0].trim(),c=t[1].trim(),m=$(n);if(m.length===0)return;const{productChunk:f,rateChunk:l}=x(c,u.parameters);if(!l)return;const e=$(f);if(e.length===0)return;const s=l.split(",").reduce((k,M)=>(M.trim().split(/\s+/).filter(Boolean).forEach(g=>k.push(g)),k),[]);if(s.length===0)return;const h=s[0],w=s[1],d={reactants:m,products:e,rate:h,isBidirectional:E,reverseRate:E?w:void 0};u.reactionRules.push(d)})}return u.reactionRules.forEach(o=>{const p=u.parameters[o.rate]??parseFloat(o.rate);if(Number.isNaN(p)||u.reactions.push({reactants:o.reactants,products:o.products,rate:o.rate,rateConstant:p}),o.isBidirectional&&o.reverseRate){const r=u.parameters[o.reverseRate]??parseFloat(o.reverseRate);Number.isNaN(r)||u.reactions.push({reactants:o.products,products:o.reactants,rate:o.reverseRate,rateConstant:r})}}),u}function I(C){const u=JSON.parse(JSON.stringify(C)),A=t=>typeof t=="string"?t.trim():"",R=t=>t?t.split(",").map(n=>n.trim()).filter(n=>n.length>0):[],x=t=>t.split("~")[0].split("!")[0],$=t=>{const n=t.match(/^([^~]+)~(.+)$/);if(n){const c=n[1],m=n[2].split("~")[0];return`${c}~${m}`}return t},B=t=>{if(t.includes("."))return t.split(".").map(e=>B(e.trim())).join(".");const n=t.match(/^([A-Za-z0-9_]+)\(([^)]*)\)/);if(!n){const e=u.moleculeTypes.find(s=>s.name===t);if(e&&e.components.length>0){const s=e.components.map($);return`${t}(${s.join(",")})`}return t}const c=n[1],m=n[2].split(",").map(e=>e.trim()).filter(Boolean),f=u.moleculeTypes.find(e=>e.name===c);if(!f)return t;const l=[];return f.components.forEach(e=>{const s=x(e),h=m.find(w=>x(w)===s);h?l.push(h):l.push($(e))}),m.forEach(e=>{const s=x(e);l.some(h=>x(h)===s)||l.push(e)}),`${c}(${l.join(",")})`},v=(t,n)=>{if(t===n)return!0;const c=(l,e)=>{const s=l.match(/^([A-Za-z0-9_]+)\(([^)]*)\)/),h=e.match(/^([A-Za-z0-9_]+)\(([^)]*)\)/);if(!s||!h)return l===e;if(s[1]!==h[1])return!1;const w=R(s[2]),d=R(h[2]);return w.every(k=>{const M=x(k);return d.some(g=>{const a=x(g);return M!==a?!1:k.includes("~")||k.includes("!")?k===g:!0})})},m=t.includes("."),f=n.includes(".");if(m){const l=t.split(".").map(s=>A(s));if(!f)return!1;const e=n.split(".").map(s=>A(s));if(l.length!==e.length)return!1;for(let s=0;s<l.length;s+=1)if(!c(l[s],e[s]))return!1;return!0}return f?n.split(".").map(e=>A(e)).some(e=>c(t,e)):c(t,n)},Z=(t,n)=>{if(!t||!n||n.includes("."))return null;const c=n.match(/^([A-Za-z0-9_]+)\(([^)]*)\)$/);if(!c)return null;const m=c[1],f=R(c[2]),l=t.split(".").map(h=>A(h));let e=!1;const s=l.map(h=>{const w=h.match(/^([A-Za-z0-9_]+)\(([^)]*)\)$/);if(!w||w[1]!==m)return h;const d=R(w[2]),k={};d.forEach(g=>{k[x(g)]=g}),f.forEach(g=>{k[x(g)]=g});const M=[];return d.forEach(g=>{const a=x(g);Object.prototype.hasOwnProperty.call(k,a)?(M.push(k[a]),delete k[a]):M.push(g)}),Object.keys(k).forEach(g=>{M.push(k[g])}),e=!0,`${m}(${M.join(",")})`});return e?s.join("."):null},T=(t,n=0,c=[])=>{if(n===t.length)return[c];const m=[],f=t[n]??[];for(let l=0;l<f.length;l+=1){const e=f[l],s=c.concat([e]),h=T(t,n+1,s);for(let w=0;w<h.length;w+=1)m.push(h[w])}return m},_=JSON.parse(JSON.stringify(u.reactions)),o=new Map(u.species.map(t=>[t.name,{...t}])),p=new Map;let r=!0;for(;r;){r=!1;const t=Array.from(o.values());_.forEach(n=>{const c=n.reactants.map(f=>{const l=t.filter(e=>v(f,e.name));return l.length===0&&(f.includes("!")||f.includes("."))?[{name:f,initialConcentration:0}]:l});if(c.some(f=>f.length===0))return;T(c).forEach(f=>{const l={reactants:f.map(s=>s.name),products:n.products.map(s=>{if(n.reactants.length===1&&n.products.length===1&&f.length===1){const h=Z(f[0].name,s);if(h)return h}return s.includes("(")?s.split(".").map(d=>{const k=d.match(/^([A-Za-z0-9_]+)\(([^)]*)\)/);if(!k)return d;const M=k[1],g=k[2];let a=f.find(y=>y.name.startsWith(`${M}(`));if(!a){for(const y of f)if(y.name.includes(".")){const S=y.name.split(".").find(O=>O.startsWith(`${M}(`));if(S){a={name:S,initialConcentration:y.initialConcentration};break}}}if(a){const y=a.name.match(/^([A-Za-z0-9_]+)\(([^)]*)\)/);if(y){const N=y[2].split(",").map(j=>j.trim()).filter(Boolean),S=g.split(",").map(j=>j.trim()).filter(Boolean),O=j=>j.split("~")[0].split("!")[0],P=S.slice(),W=S.reduce((j,z)=>(j[O(z)]=z,j),{});return N.forEach(j=>{const z=O(j);Object.prototype.hasOwnProperty.call(W,z)||P.some(U=>O(U)===z)||P.push(j)}),`${M}(${P.join(",")})`}}return d}).join("."):s}),rate:n.rate,rateConstant:n.rateConstant},e=JSON.stringify({reactants:l.reactants,products:l.products,rate:l.rate,rateConstant:l.rateConstant});p.has(e)||p.set(e,l),l.products.forEach(s=>{const h=B(s);o.has(h)||(o.set(h,{name:h,initialConcentration:0}),r=!0)})})})}u.reactions=Array.from(p.values()),u.species=Array.from(o.values());const i=u.species.map(t=>t.name);u.reactions.forEach(t=>{t.reactants=t.reactants.map(n=>{const c=B(n);if(i.includes(c))return c;if(i.includes(n))return n;const m=i.find(f=>v(c,f)||v(n,f));return m&&m!==n?m:c!==n?c:n}),t.products=t.products.map(n=>{if(i.includes(n))return n;const c=i.find(m=>v(n,m));return c&&c!==n?c:n})});const b=new Set;u.reactions.forEach(t=>{t.products.forEach(n=>{const c=B(n);b.add(c),t.products=t.products.map(m=>m===n?c:m)})});const E=new Set(u.species.map(t=>t.name));return b.forEach(t=>{E.has(t)||(u.species.push({name:t,initialConcentration:0}),E.add(t))}),u}function J(C,u){const A=I(C),R=JSON.parse(JSON.stringify(A)),{t_end:x,n_steps:$,method:B}=u,v=R.species.map(o=>o.name),Z=["time",...R.observables.map(o=>o.name)],T=o=>{const p={};return R.observables.forEach(r=>{let i=0;const b=r.pattern.trim();for(const[E,t]of Object.entries(o)){const n=E.trim();if(n===b){i+=t;continue}if(b.includes("!+")){const c=b.match(/^([A-Za-z0-9_]+)\(([^)]+)\)/);if(c){const m=c[1],l=c[2].split("!")[0];if(n.includes(`${m}(`)){const e=new RegExp(`${m}\\(([^)]*)\\)`),s=n.match(e);if(s){const h=s[1];new RegExp(`${l}!`).test(h)&&(i+=t)}}}continue}if(b.includes("!")&&!b.includes("!+")){n===b&&(i+=t);continue}if(b.includes("(")){const c=b.match(/^([A-Za-z0-9_]+)\(([^)]*)\)/);if(c){const m=c[1],f=c[2].trim();if(n.includes(`${m}(`)){const l=new RegExp(`${m}\\(([^)]*)\\)`),e=n.match(l);if(e){const s=e[1].split(",").map(d=>d.trim()).filter(Boolean),h=f?f.split(",").map(d=>d.trim()).filter(Boolean):[];(h.every(d=>{const k=d.split("~")[0].split("!")[0],M=d.includes("~")?d.split("~")[1].split("!")[0]:null,g=d.includes("!")?d.split("!")[1]:null,a=d.length>0&&!d.includes("!")&&!d.includes("~");return s.some(y=>!(y.split("~")[0].split("!")[0]!==k||M&&!y.includes(`~${M}`)||a&&y.includes("!")||g&&!y.includes(`!${g}`)))})||h.length===0)&&(i+=t)}}}}else n===b&&(i+=t)}p[r.name]=i}),p},_=[];if(B==="ssa"){let o=Object.fromEntries(R.species.map(b=>[b.name,Math.round(b.initialConcentration)]));const p=x/$;let r=0,i=0;for(_.push({time:r,...T(o)});r<x;){const b=R.reactions.map(e=>{let s=e.rateConstant;return e.reactants.forEach(h=>{const w=o[h];w===void 0&&console.warn("[SSA] Missing reactant in counts:",h,"Available:",Object.keys(o)),s*=w||0}),s}),E=b.reduce((e,s)=>e+s,0);if(E===0)break;const t=Math.random(),n=1/E*Math.log(1/t);r+=n;const c=Math.random()*E;let m=0,f=b.length-1;for(let e=0;e<b.length;e+=1)if(m+=b[e],c<=m){f=e;break}const l=R.reactions[f];for(l.reactants.forEach(e=>{const s=o[e]||0;o[e]=s-1}),l.products.forEach(e=>{const s=o[e]||0;o[e]=s+1});r>=i&&i<=x;)_.push({time:Math.round(i*1e10)/1e10,...T(o)}),i+=p}for(;i<=x;)_.push({time:Math.round(i*1e10)/1e10,...T(o)}),i+=p;return{headers:Z,data:_}}if(B==="ode"){let o=R.species.map(e=>e.initialConcentration);const p=(e,s)=>{if(e===s)return!0;const h=e.includes("!"),w=s.includes("!")||s.includes(".");if(!h&&w)return!1;const d=e.match(/^([A-Za-z0-9_]+)\(([^)]*)\)/),k=s.match(/^([A-Za-z0-9_]+)\(([^)]*)\)/);if(d&&k&&d[1]===k[1]){const M=d[2].split(",").map(a=>a.trim()).filter(Boolean),g=k[2].split(",").map(a=>a.trim()).filter(Boolean);return M.every(a=>{const y=a.split("~")[0].split("!")[0];return g.some(N=>{const S=N.split("~")[0].split("!")[0];return y!==S?!1:a.includes("~")||a.includes("!")?a===N:!0})})}return!1},r=(e,s)=>{const h={};v.forEach((d,k)=>{h[d]=e[k]});const w=new Array(v.length).fill(0);return R.reactions.forEach(d=>{if(d.reactants.every(M=>v.includes(M))){let M=d.rateConstant;d.reactants.forEach(g=>{M*=h[g]||0}),d.reactants.forEach(g=>{const a=v.indexOf(g);a!==-1&&(w[a]-=M)}),d.products.forEach(g=>{const a=v.indexOf(g);if(a!==-1)w[a]+=M;else for(let y=0;y<v.length;y+=1)if(p(g,v[y])){w[y]+=M;break}})}else{const M=d.reactants.map(a=>{const y=[];return v.forEach((N,S)=>{p(a,N)&&y.push({name:N,idx:S})}),y});if(!M.every(a=>a.length===1))return;let g=d.rateConstant;if(M.forEach(a=>{g*=h[a[0].name]||0}),g===0)return;M.forEach(a=>{w[a[0].idx]-=g}),d.products.forEach(a=>{const y=v.indexOf(a);if(y!==-1)w[y]+=g;else for(let N=0;N<v.length;N+=1)if(p(a,v[N])){w[N]+=g;break}})}}),w},i=(e,s,h)=>{const w=r(e),d=e.map((S,O)=>S+.5*s*w[O]),k=r(d),M=e.map((S,O)=>S+.5*s*k[O]),g=r(M),a=e.map((S,O)=>S+s*g[O]),y=r(a);return e.map((S,O)=>S+s/6*(w[O]+2*k[O]+2*g[O]+y[O])).map(S=>Math.max(0,S))},b=x/$;let E=0;const t={};v.forEach((e,s)=>{t[e]=o[s]}),_.push({time:E,...T(t)});const n=u.steadyStateTolerance??1e-6,c=u.steadyStateWindow??5,m=!!u.steadyState;let f=0,l=!1;for(let e=1;e<=$&&!l;e+=1){const s=e*b,h=R.reactions.reduce((a,y)=>Math.max(a,y.rateConstant||0),0),w=Math.max(1,h*100),d=Math.max(10,Math.ceil(b*10*w)),k=(s-E)/d;let M=E;for(;M<s-1e-12;){let a=Math.min(k,s-M),y=0,N=null;const S=12,O=1e12;for(;y<S;){const W=i(o,a);if(!W.some(z=>!Number.isFinite(z)||Math.abs(z)>O)){N=W;break}if(a/=2,y+=1,a<1e-12)break}if(!N)throw new Error("Simulation became unstable (adaptive RK4 step failed). Try adjusting parameters or using the SSA solver.");const P=Math.max(...N.map((W,j)=>Math.abs(W-o[j])));if(o=N,M+=a,m)if(P<=n){if(f+=1,f>=c){l=!0;break}}else f=0}E=M;const g={};if(v.forEach((a,y)=>{g[a]=o[y]}),_.push({time:Math.round(E*1e10)/1e10,...T(g)}),l)break}return{headers:Z,data:_}}throw new Error(`Unsupported simulation method: ${B}`)}L.addEventListener("message",C=>{const{id:u,type:A,payload:R}=C.data;try{if(A==="parse"){const x=F(R),$={id:u,type:"parse_success",payload:x};L.postMessage($)}else if(A==="simulate"){const{model:x,options:$}=R,B=J(x,$),v={id:u,type:"simulate_success",payload:B};L.postMessage(v)}else throw new Error(`Unknown worker message type: ${A}`)}catch(x){const $=x instanceof Error?x:new Error(String(x)),B={id:u,type:`${A}_error`,payload:{message:$.message}};L.postMessage(B)}})})();
